SHELL=/bin/sh

ifndef APP
$(error APP is not set)
# APP = out
endif

ifndef SRC_DIR
$(error SRC_DIR is not set)
# SRC_DIR = ../libs/src
endif

ifndef CFG_DIR
$(error CFG_DIR is not set)
# CFG_DIR = ./cfg
endif

ifndef TARGET
$(error TARGET is not set)
# TARGET = ../libs/targets/uno.mk
endif

ifndef SERIAL_TTY
$(error SERIAL_TTY is not set)
# SERIAL_TTY = /dev/ttyUSB0
endif

ifndef SERIAL_BAUDRATE
$(error SERIAL_BAUDRATE is not set)
# SERIAL_BAUDRATE = 19200
endif

ifndef MODULES
$(warning Building with no modules enabled)
# MODULES = os timer serial spi st7735 i2c port
endif

ifndef INCLUDES
$(error INCLUDES is not set)
# INCLUDES = ./app ./res
endif

# Path to build tools
CC = avr-gcc
OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size

include $(TARGET)
include $(MODULES:%=$(SRC_DIR)/%/makefile.include)

# Output files
OUT = bin/$(ARCH)
OBJ = obj/$(ARCH)
HEX = $(OUT)/$(APP).hex
ELF = $(OUT)/$(APP).elf
MAP = $(OUT)/$(APP).map
DMP = $(OUT)/$(APP).dump

# Compilation options and flags
WARNINGS += all extra undef
DEFINES +=
CFLAGS += -MMD -O2 -flto -g0 -mmcu=$(ARCH)
LDFLAGS += -gc-sections --relax -Map,$(MAP)

OBJECTS = $(SOURCES:%.c=$(OBJ)/%.o)
DEPENDS = $(SOURCES:%.c=$(OBJ)/%.d)

w=-Wl,
l=-l
I=-I
W=-W
D=-D

# Font colors
C_RED     = $(shell [ -z "${TERM}" ] || tput setaf 1)
C_GREEN   = $(shell [ -z "${TERM}" ] || tput setaf 2)
C_MAGENTA = $(shell [ -z "${TERM}" ] || tput setaf 5)
C_RESET   = $(shell [ -z "${TERM}" ] || tput sgr0)

# Printing macros
print_error = $(error $(C_RED)$1$(C_RESET))
print_info  = $(info $(C_MAGENTA)$1$(C_RESET))
print_trace = $(info $(C_GREEN)$1$(C_RESET))

.PRECIOUS: %/.dir
.PHONY: all clean upload monitor

# Output is silent by default, unless VERBOSE is defined
ifndef VERBOSE
.SILENT:
endif

all: $(HEX) $(ELF) $(DMP)
	$(call print_info,Done)
	@echo "Output is : $(HEX)"
	$(SIZE) -C --mcu=$(ARCH) "$(ELF)"

clean:
	$(call print_info,Cleaning workspace)
	rm -rf "$(OBJ)"
	rm -rf "$(OUT)"

upload: $(HEX)
	$(call print_info,Uploading to target)
	avrdude -P $(SERIAL_TTY) -c $(PROGRAMMER_TYPE) -p $(PROGRAMMER_TARGET) $(PROGRAMMER_FLAGS) -U flash:w:"$<"

monitor:
	$(call print_info,Start serial monitor)
	picocom -b $(SERIAL_BAUDRATE) $(SERIAL_TTY)

%/.dir:
	mkdir -p "$(@D)"
	touch "$@"

.SECONDEXPANSION:

$(ELF): $(OBJECTS) | $$(@D)/.dir
	$(call print_info,Linking object files)
	$(CC) $(addprefix $l,$(LIBS)) $(addprefix $w,$(LDFLAGS)) $(CFLAGS) $(OBJECTS) -o "$@"
	@echo "Built $@"

$(HEX): $(ELF) | $$(@D)/.dir
	$(call print_info,Creating HEX file)
	$(OBJCOPY) -O ihex "$<" "$@"
	@echo "Built $@"

$(DMP): $(ELF) | $$(@D)/.dir
	$(call print_info,Generating object dump)
	$(OBJDUMP) -xtr "$<" > "$@"
	@echo "Built $@"

# Generic rules for compiling C files
$(OBJ)/%.o: %.c | $$(@D)/.dir
	$(call print_trace,Building $@)
	$(CC) $(addprefix $I,$(INCLUDES)) $(addprefix $D,$(DEFINES)) $(addprefix $W,$(WARNINGS)) $(CFLAGS) -c -o "$@" "$<"

-include $(DEPENDS)
